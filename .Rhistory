colnames(frame) <- c("Periodo", paste0("y_",codigo_y), paste0("x_",codigo_x))
frame
str(frame)
frame[,1] <- as.character(frame[,1])
m <- regressao_parametrica(frame, defx = 1, defy = 0)
m$serie_ajustada
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
require(xlsx)
setwd("V:\\SUEP\\Núcleo de Métodos Estatísticos e Computacionais\\18 Modelo Paramétrico\\04 ModeloParametrico_Regressao")
# Ler s?rie hist?rica de interesse
serie_original <- read.xlsx("Series_historicas.xlsx", 1, header=TRUE)
# Carregar fun??es
source("Funcoes_indparam_semgraficos.R")
# Regress?o linear para a varia??o do pre?o do tranformador
require(glmulti)
regressao_precotransformador = regressao_parametrica(serie_original, defx=1, defy=0, auto=TRUE)
indiceparametrico_fixo = indparam_fixo(serie_original, coef=c(0.3,0.7),
covar=c("IPA", "Prod_Sid"))
indiceparametrico_fixo$Preco_Parametrico
indiceparametrico_fixo$PrecoParametrico_acumulado
indiceparametrico_fixo$Preco_Transformador
ts.plot(indiceparametrico_fixo$PrecoParametrico_acumulado,
indiceparametrico_fixo$Preco_Transformador)
serie_original
indiceparametrico_fixo$Preco_Transformador
runApp('C:/Users/daiane.mattos/Dropbox/Github/SmartIBRE/smartibre')
runApp('C:/Users/daiane.mattos/Dropbox/Github/SmartIBRE/smartibre')
runApp('C:/Users/daiane.mattos/Dropbox/Github/SmartIBRE/smartibre')
runApp('C:/Users/daiane.mattos/Dropbox/Github/SmartIBRE/smartibre')
runApp('C:/Users/daiane.mattos/Dropbox/Github/SmartIBRE/smartibre')
shiny::runApp('smartibre')
codigos <- c("ST_100.0", "ST_100.1")
data <- data.frame(t(sapply(as.numeric(codigos), FUN = function(x){BETS.search(code = x, view = F)})))
data
BETS.search(code = codigos[1])
as.numeric(codigos)
runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
library(R.matlab, Matrix)
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
install.packages("shinyLP")
runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
shiny::runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
shiny::runApp('smartibre')
runApp('C:/Users/daiane.mattos/Dropbox/Dashboard_inflation')
runApp('C:/Users/daiane.mattos/Dropbox/Dashboard_inflation')
runApp('smartibre')
library(zoo)
zd <- read.zoo(text = Lines, header = TRUE)
tt <- as.yearmon(seq(start(zd), end(zd), "month"))
zm <- na.spline(zd, as.yearmon, xout = tt)
data(Lines)
shiny::runApp('smartibre')
library(shiny)
library(shinydashboard)
library(shinythemes)
library(shinyBS)
library(BETS)
library(DBI)
library(RMySQL)
library(DT)
library(dygraphs)
library(RColorBrewer)
library(htmlwidgets)
library(zoo)
library(shinyjs)
library(xts)
library(glmulti)
install.packages("glmulti")
runApp('smartibre')
shiny::runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
runApp('smartibre')
shiny::runApp('smartibre')
install.packages("glmulti")
installed.packages("rjava")
installed.packages("LinkingTo")
installed.packages("LibPath")
installed.packages("rjava")
install.packages("glmulti")
library("rJava", lib.loc="/usr/lib/R/site-library")
library("rJava", lib.loc="/usr/lib/R/site-library")
install.packages("libjvm")
shiny::runApp('smartibre')
install.packages("glmulti")
installed.packages("rjava")
installed.packages("rjava")
remove.packages("rJava", lib="/usr/lib/R/site-library")
library("rJava", lib.loc="/usr/lib/R/site-library")
remove.packages("rJava", lib="/usr/lib/R/site-library")
library("rJava", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:rJava", unload=TRUE)
shiny::runApp('smartibre')
install.packages("glmulti")
library("rJava", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
runApp('smartibre')
install.packages("XML")
runApp('smartibre')
require(BETS)
gewd()
getwd()
BETS.report(report.file = "/home/john/Desktop/smartibre/data/teste")
install.packages("mFilter")
BETS.report(report.file = "/home/john/Desktop/smartibre/data/teste")
runApp('smartibre')
runApp('smartibre')
getwd()
runApp('smartibre')
runApp('smartibre')
setwd("smartibre/")
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
hoje = Sys.Date()
hoje
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ontem = Sys.Date()-1
ontem
runApp()
runApp()
portal_ibre = "http://portalibre.fgv.br/"
blog_ibre_feed = "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
connection = function(){
conn = dbConnect(MySQL(),db="smartibredb",user="smartibre_user",password="123456",host="200.20.164.178",port=3306)
}
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
crawler_blog_ibre <- function(){
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "href")
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
date <- xml %>% html_nodes("item pubDate") %>% html_text(trim=T) %>% cleanFun()
manchete  = iconv(manchete,from="UTF-8",to="latin1")
descricao = iconv(descricao,from="UTF-8",to="latin1")
novo_df <- data.frame(link = link,
manchete = manchete,
descricao = descricao,
date = date,
stringsAsFactors = TRUE
)
conn = connection()
message("Adicionando novas noticias no banco")
if("noticiasbi" %in% DBI::dbListTables(conn)){
dbSendQuery(conn,"drop table noticiasBI")
}
DBI::dbWriteTable(conn,name = "noticiasBI",novo_df,overwrite = TRUE)
invisible(dbDisconnect(conn))
}
crawler_blog_ibre()
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
html<-read_html(x = url_base)
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "href")
feeds_link
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "href")
feeds_link
feeds_link <- html %>% html_nodes(css = "item .h4 a") %>% html_attr(name = "href")
feeds_link
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "href")
feeds_link
feeds_link <- html %>% html_nodes(css = "article .h4 a item") %>% html_attr(name = "href")
feeds_link
feeds_link <- html %>% html_nodes(css = "article .h4 a item")
feeds_link
feeds_link <- html %>% html_nodes(css = "article .h4 a item") %>% html_attr(name = "link")
feeds_link <- html %>% html_nodes(x = "<link>") %>% html_attr(name = "link")
feeds_link <- html %>% html_nodes(x = "<link>") %>% html_attr(name = "link")
feeds_link <- html %>% html_nodes(x = "<link>")
feeds_link <- html %>% html_nodes(css = "<link>") %>% html_attr(name = "link")
feeds_link <- html %>% html_nodes(css = "link") %>% html_attr(name = "link")
feeds_link
feeds_link <- html %>% html_nodes(css = "link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item link")  %>% html_attr(name = "link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item link")  %>% html_text()
feeds_link
feeds_link <- html %>% html_nodes(css = "item link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item link") %>% html_text()
feeds_link
html
html
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
feed_link %>% html_nodes(css = "link")
feeds_link %>% html_nodes(css = "link")
feeds_link %>% html_nodes(css = "title")
feeds_link %>% html_nodes(css = "link")
require(jsonlite)
jsonlite::write_json(feeds_link)
jsonlite::write_json(toJSON(feeds_link))
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "item")
toJSON(feeds_link)
install.packages"feedeR")
install.packages("feedeR")
require(feedeR)
feedeR::feed.extract(url = url_base)
aux = feedeR::feed.extract(url = url_base)
aux = feedeR::feed.extract(url = url_base)
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
aux = feedeR::feed.extract(url = url_base)
aux
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
aux = feedeR::feed.extract(url = url_base)
aux = feedeR::feed.extract("http://blogdoibre.fgv.br/rss/posts/")
aux = feedeR::feed.extract("http://blogdoibre.fgv.br/rss/posts/")
url_base <- "http://blogdoibre.fgv.br/rss/posts/"
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
html
html
feeds_link <- html %>% html_nodes(css = "<item>")  %>% html_nodes(css = "link")
feeds_link <- html %>% html_nodes(css = "<item>")  %>% html_nodes(css = "link")
feeds_link <- html %>% html_nodes(css = "item")  %>% html_nodes(css = "link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
url_base <- "http://blogdoibre.fgv.br/rss/posts/"
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
html
feeds_link <- html %>% html_nodes(css = "body chanel item") %>% html_attr("link")
feeds_link <- html %>% html_nodes(css = "body chanel item")
feeds_link <- html %>% html_nodes(css = "body chanel item .a")
feeds_link
feeds_link <- html %>% html_nodes(css = "body chanel item")
feeds_link
html
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
html<-read_html(x = url_base)
html<-read_html(x = url_base)
feeds_link <- html %>% html_nodes(css = "")
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "href")
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "http")
feeds_link <- html %>% html_nodes(css = "article .h4 a") %>% html_attr(name = "http")
feeds_link <- html %>% html_nodes(css = "link") %>% html_attr(name = "http")
feeds_link <- html %>% html_nodes(css = "link") %>% html_attr(name = "http")
feeds_link <- html %>% html_nodes(css = "link") %>% html_attr(name = "https")
feeds_link
feeds_link <- html %>% html_nodes(css = "link") %>% html_attrs(name = "https")
feeds_link <- html %>% html_nodes(css = "link") %>% html_attr(name = "href")
feeds_link <- html %>% html_nodes(css = "link")
feeds_link
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
intems <- feeds_link %>% html_nodes(css="link")
intems
feeds_link <- html %>% html_nodes(css = "item")
feeds_link
aux <- html_tag(x = "link")
aux <- html_tag(x = "<link>")
aux <- html_name(x = "<link>")
aux <- html_name(x = "link")
aux <- html_children("link")
aux <- stringr::str_detect(string = "link")
aux <- stringr::str_detect(string =feeds_link,pattern = "link")
aux
aux <- stringr::str_extract(string =feeds_link,pattern = "<link>.*.</link>")
aux
aux <- stringr::str_extract(string =feeds_link,pattern = "<link>.*</link>")
aux <- stringr::str_extract(string =feeds_link,pattern = "<link>.*")
aux
link <- feeds_link %>% html_nodes(css = "link")
link
feeds_link <- html %>% html_nodes(css = "item")
aux <- stringr::str_extract(string =feeds_link,pattern = "<link>.*")
aux
links <- stringr::str_replace(string = aux,pattern = "<link>",replacement ="")
links
xml  <- read_xml(x = url_base,encoding = "UTF-8")
xml  <- read_xml(x = url_base,encoding = "UTF-8")
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
link
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
manchete
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
date <- xml %>% html_nodes("item pubDate") %>% html_text(trim=T) %>% cleanFun()
manchete  = iconv(manchete,from="UTF-8",to="latin1")
descricao = iconv(descricao,from="UTF-8",to="latin1")
novo_df <- data.frame(link = link,
manchete = manchete,
descricao = descricao,
date = date,
stringsAsFactors = TRUE
)
conn = connection()
message("Adicionando novas noticias no banco")
if("noticiasbi" %in% DBI::dbListTables(conn)){
dbSendQuery(conn,"drop table noticiasBI")
}
DBI::dbWriteTable(conn,name = "noticiasBI",novo_df,overwrite = TRUE)
invisible(dbDisconnect(conn))
crawler_blog_ibre()
conn = connection()
noticias_bi = DBI::dbGetQuery(conn,"Select link,manchete,descricao,date from noticiasBI order by date desc limit 10")
noticias_bi$manchete = iconv(noticias_bi$manchete,from="UTF-8",to="latin1")
noticias_bi$descricao = iconv(noticias_bi$descricao,from="UTF-8",to="latin1")
noticias_bi = unique(noticias_bi)
noticias_bi$descricao[1] <- paste0(strsplit(noticias_bi$descricao, " ")[[1]][1:50], collapse = " ")
noticias_bi$descricao[2] <- paste0(strsplit(noticias_bi$descricao, " ")[[2]][1:50], collapse = " ")
noticias_bi$descricao[3] <- paste0(strsplit(noticias_bi$descricao, " ")[[3]][1:50], collapse = " ")
invisible(dbDisconnect(conn))
runApp()
runApp()
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
date <- xml %>% html_nodes("item pubDate") %>% html_text(trim=T) %>% cleanFun()
manchete  = iconv(manchete,from="UTF-8",to="latin1")
descricao = iconv(descricao,from="UTF-8",to="latin1")
novo_df <- data.frame(link = link,
manchete = manchete,
descricao = descricao,
date = date,
stringsAsFactors = TRUE
)
runApp()
descricao
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
manchete
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T)
descricao
descricao
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
descricao
runApp()
runApp()
runApp()
runApp()
runApp()
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
date <- xml %>% html_nodes("item pubDate") %>% html_text(trim=T) %>% cleanFun()
manchete  = iconv(manchete,from="UTF-8",to="latin1")
descricao = iconv(descricao,from="UTF-8",to="latin1")
novo_df <- data.frame(link = link,
manchete = manchete,
descricao = descricao,
date = date,
stringsAsFactors = TRUE
)
novo_df
View(novo_df)
View(novo_df)
url_base <- "http://blogdoibre.fgv.br/rss/posts/posts-rss.xml"
xml  <- read_xml(x = url_base,encoding = "UTF-8")
link <- xml %>% html_nodes("item link") %>% html_text(trim = T)
manchete <- xml %>% html_nodes("item title") %>% html_text(trim=T)
descricao <- xml %>% html_nodes("item description") %>% html_text(trim=T) %>% cleanFun()
date <- xml %>% html_nodes("item pubDate") %>% html_text(trim=T) %>% cleanFun()
manchete= iconv(manchete,from="UTF-8",to="latin1")
novo_df <- data.frame(link = link,
manchete = manchete,
descricao = descricao,
date = date,
stringsAsFactors = TRUE
)
View(novo_df)
runApp()
runApp()
invisible(dbDisconnect(conn))
invisible(dbDisconnect(conn))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
aux = BETS::BETS.report(report.file = "data/data_smartibre")
output$relatorio = file.access("data/")
file.access("data/")
output$relatorio = file.access("/data/")
file.access("/data/")
getwd()
list.files("data/")
"data_smartibre" %*% list.files("data/")
list.files("data/")
"data_smartibre" %*% list.files("data/")
"data_smartibre" %*% as.vectorlist.files("data/")
output$relatorio = "data_smartibre" %*% as.vector(list.files("data/"))
"data_smartibre" %*% as.vector(list.files("data/"))
as.vector(list.files("data/"))
"data_smartibre" %*% as.vector(list.files("data/"))
"data_smartibre" %in% as.vector(list.files("data/"))
aux1= as.vector(list.files("data/"))
aux = BETS::BETS.report(report.file = "data/datasmartibre")
aux1= as.vector(list.files("data/"))
aux = BETS::BETS.report(report.file = "data/datasmartibre")
i=1
stringr::str_split(aux1[i],pattern = "_")
"relatoriosmartibre" %in% stringr::str_split(aux1[i],pattern = "_")
i=2
"relatoriosmartibre" %in% stringr::str_split(aux1[i],pattern = "_")
stringr::str_split(aux1[i],pattern = "_")
aux1= as.vector(list.files("data/"))
stringr::str_split(aux1[i],pattern = "_")
"relatoriosmartibre" %in% stringr::str_split(aux1[i],pattern = "_")
as.vector(stringr::str_split(aux1[i],pattern = "_"))
"relatoriosmartibre" %in% as.vector(stringr::str_split(aux1[i],pattern = "_"))
stringr::str_split(aux1[i],pattern = "_")[1]
stringr::str_split(aux1[i],pattern = "_")[[1]]
"relatoriosmartibre" %in% stringr::str_split(aux1[i],pattern = "_")[[1]]
output$relatorio = aux[i]
relatorio
relatorio = aux[i]
relatorio
relatorio = aux1[i]
relatorio
runApp()
runApp()
runApp()
runApp()
runApp()
